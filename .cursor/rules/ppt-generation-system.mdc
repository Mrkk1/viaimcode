---
description:
globs:
alwaysApply: false
---
# PPT Generation System Architecture

## Core Components

### Main Component
The primary component is [components/ppt-generation-view.tsx](mdc:components/ppt-generation-view.tsx) which handles:
- PPT slide generation and modification
- Real-time chat interface with AI
- Visual slide preview and editing
- User interaction with slide elements

### API Layer
- [app/api/ppt-tasks/[id]/route.ts](mdc:app/api/ppt-tasks/[id]/route.ts) - Main API endpoint for PPT operations
- Handles actions: `save_slide`, `update_slide`, `delete_slides`, `add_chat_message`, `complete_project`

### Database Layer
- [lib/ppt-db.ts](mdc:lib/ppt-db.ts) - Database operations for PPT projects and slides
- Contains methods for slide CRUD operations and project management

## Key Data Structures

### PPTSlide Interface
```typescript
interface PPTSlide {
  id: string
  title: string
  content: string
  htmlCode: string
  isGenerating: boolean
  generationProgress: string
  thinkingContent?: string
  realtimeThinkingContent?: string
  viewMode: 'render' | 'code' | 'thinking'
  userSelectedViewMode?: 'render' | 'code' | 'thinking'
}
```

### AI Analysis Structure
The system uses AI analysis results with specific properties:
- `intent.modificationType`: `"content"` | `"structure"`
- `suggestedAction.actionType`: `"regenerate_single_page"` | `"regenerate_multiple_pages"` | `"regenerate_all_pages"`
- `extractedRequirements.specificChanges`: Array of change descriptions

## Critical Patterns

### Modification Type Detection
- **Content Modification**: Changes to text, styling, or elements within a slide
- **Structure Modification**: Adding/removing entire slides or major layout changes
- Use `isDeletePageOperation()` function to distinguish between content deletion and page deletion

### Database Status Values
The `ppt_slides` table `status` field only accepts:
- `'pending'` | `'thinking'` | `'generating'` | `'completed'` | `'failed'`
- **Never use**: `'regenerated'`, `'regenerated_multi'`, or custom status values

### Error Handling Pattern
Always check HTTP response status when saving to database:
```typescript
const response = await fetch(`/api/ppt-tasks/${projectId}`, { ... });
if (!response.ok) {
  // Handle error appropriately
}
```

## Common Issues and Solutions

### Persistence Problems
- Ensure API handlers have correct action cases
- Verify database status values are valid
- Check that `updateSlideContent()` method exists and is properly called

### Delete Operation Logic
- Content deletion: Modify slide content while keeping the slide
- Page deletion: Remove entire slide and reindex remaining slides
- Always check `modificationType` before determining delete operation type

### Element Selection System
The system uses complex element selection with:
- Tree path generation for precise element targeting
- Unique feature extraction for element identification
- Click handlers for interactive element selection

## Development Guidelines

### When Adding New Actions
1. Add case in API route handler
2. Ensure corresponding database method exists
3. Add proper error handling and status checks
4. Update frontend to handle new action responses

### When Modifying Slide Logic
1. Consider both content and structure modification types
2. Preserve slide indexing when deleting
3. Update chat messages with appropriate feedback
4. Ensure database persistence works correctly

### Testing Modifications
- Always test page refresh to ensure persistence
- Verify different modification types work correctly
- Check that error messages are user-friendly
- Test with various slide counts and positions
